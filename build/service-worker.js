"use strict";function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}var precacheConfig=[[" index.html","c893ac4623556f76b7c5deff2c50da99"],[" static/css/main.760d4f3d.css","1bde3a415afc4e2b52c3dfb97151f008"],[" static/js/main.d120979c.js","97d4bcc7d9381bb537f653d6badefcff"],[" static/media/Roboto-Light.3fc1c8bd.svg","3fc1c8bdc03a8370d6ac24027b58c511"],[" static/media/Roboto-Light.97b9f3ce.eot","97b9f3cef53936fc52da2c6eacb0ac84"],[" static/media/Roboto-Light.c8405cfa.woff","c8405cfa0df9fb2e47ef1c516cef59a8"],[" static/media/Roboto-Light.fc84e998.ttf","fc84e998bc29b297ea20321e4c90b6ed"],[" static/media/Roboto-Thin.03fb3a93.woff","03fb3a93c4a33abb815862cd83b3940a"],[" static/media/Roboto-Thin.1869e98f.eot","1869e98fa75096868d280ec8c4b72ce7"],[" static/media/Roboto-Thin.89e2666c.ttf","89e2666c24d37055bcb60e9d2d9f7e35"],[" static/media/Roboto-Thin.b3d9dea6.svg","b3d9dea687a828d141b5d6398d944b75"],[" static/media/bathtub.01cd1ba3.png","01cd1ba325dea7410e0c2237570fbba4"],[" static/media/bottom-background.957b3d38.png","957b3d383c57d7daaddf1c3f5aeae0cd"],["./static/media/cleaner.d0ddbc09.jpg","d0ddbc09d2e6e51a576655e0920f9751"],[" static/media/main-page-backgound-min.422310af.png","422310afd6e5d725d3d912c7c5a2c8dc"],[" static/media/tray.9cc899f5.png","9cc899f5896ada685a70116b99efdf38"],[" static/media/trust_page__block-eco.6363a0dc.png","6363a0dc2ca2d21b81a9662e92d4b6e5"],[" static/media/trust_page__block-quality.501c3722.png","501c372240d9fcd3672eb48c747626e6"],[" static/media/trust_page__block-safety.bc8afad3.png","bc8afad3f9a6f83be130062b50b6d551"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var a=new URL(e);return"/"===a.pathname.slice(-1)&&(a.pathname+=t),a.toString()},cleanResponse=function(e){return e.redirected?("body"in e?Promise.resolve(e.body):e.blob()).then(function(t){return new Response(t,{headers:e.headers,status:e.status,statusText:e.statusText})}):Promise.resolve(e)},createCacheKey=function(e,t,a,n){var c=new URL(e);return n&&c.pathname.match(n)||(c.search+=(c.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(a)),c.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var a=new URL(t).pathname;return e.some(function(e){return a.match(e)})},stripIgnoredUrlParameters=function(e,t){var a=new URL(e);return a.hash="",a.search=a.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(e){return t.every(function(t){return!t.test(e[0])})}).map(function(e){return e.join("=")}).join("&"),a.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],a=e[1],n=new URL(t,self.location),c=createCacheKey(n,hashParamName,a,/\.\w{8}\./);return[n.toString(),c]}));self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(e){return setOfCachedUrls(e).then(function(t){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(a){if(!t.has(a)){var n=new Request(a,{credentials:"same-origin"});return fetch(n).then(function(t){if(!t.ok)throw new Error("Request for "+a+" returned a response with status "+t.status);return cleanResponse(t).then(function(t){return e.put(a,t)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var t=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(e){return e.keys().then(function(a){return Promise.all(a.map(function(a){if(!t.has(a.url))return e.delete(a)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(e){if("GET"===e.request.method){var t,a=stripIgnoredUrlParameters(e.request.url,ignoreUrlParametersMatching);(t=urlsToCacheKeys.has(a))||(a=addDirectoryIndex(a,"index.html"),t=urlsToCacheKeys.has(a));!t&&"navigate"===e.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],e.request.url)&&(a=new URL(" index.html",self.location).toString(),t=urlsToCacheKeys.has(a)),t&&e.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(a)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(t){return console.warn('Couldn\'t serve response for "%s" from cache: %O',e.request.url,t),fetch(e.request)}))}});